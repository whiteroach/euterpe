//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tracks")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub track_id: i32,
    pub title: String,
    pub duration: Time,
    pub link_audio: Option<String>,
    pub bpm: Option<i32>,
    pub deleted_at: Option<DateTime>,
    pub genre_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::genres::Entity",
        from = "Column::GenreId",
        to = "super::genres::Column::GenreId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Genres,
}

//MANY-TO-MANY
impl Related<super::albums::Entity> for Entity {
    fn to() -> RelationDef {
        super::album_track::Relation::Albums.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::album_track::Relation::Tracks.def().rev())
    }
}
//MANY-TO-MANY
impl Related<super::playlist::Entity> for Entity {
    fn to() -> RelationDef {
        super::playlist_track::Relation::Playlist.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::playlist_track::Relation::Tracks.def().rev())
    }
}

impl Related<super::genres::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Genres.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}