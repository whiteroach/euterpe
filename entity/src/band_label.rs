//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "band_label")]
pub struct Model {
    pub band_id: i32,
    pub label_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    // #[sea_orm(
    //     belongs_to = "super::bands::Entity",
    //     from = "Column::BandId",
    //     to = "super::bands::Column::BandId",
    //     on_update = "NoAction",
    //     on_delete = "NoAction"
    // )]
    Bands,
    // #[sea_orm(
    //     belongs_to = "super::labels::Entity",
    //     from = "Column::LabelId",
    //     to = "super::labels::Column::LabelId",
    //     on_update = "NoAction",
    //     on_delete = "NoAction"
    // )]
    Labels,
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Bands => Entity::belongs_to(super::bands::Entity).from(Column::band_id
            ).to(super::albums::Column::BandId).into(),
            Self::Labels => Entity::belongs_to(super::labels::Entity).from(Column::label_id).to(super::labels::Column::LabelId).into(),
        }
    }
}
// impl Related<super::bands::Entity> for Entity {
//     fn to() -> RelationDef {
//         Relation::Bands.def()
//     }
// }

// impl Related<super::labels::Entity> for Entity {
//     fn to() -> RelationDef {
//         Relation::Labels.def()
//     }
// }

impl ActiveModelBehavior for ActiveModel {}
