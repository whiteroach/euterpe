//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub user_id: i32,
    pub first_name: String,
    pub last_name: String,
    pub username: String,
    pub email: String,
    pub user_type: String,
    pub online: bool,
    pub deleted_at: Option<Date>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::albums::Entity")]
    Albums,
    Playlists,
}

impl Related<super::albums::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Albums.def()
    }
}

//MANY-TO-MANY
impl Related<super::bands::Entity> for Entity {
    fn to() -> RelationDef {
        super::band_user::Relation::Bands.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::band_user::Relation::Users.def().rev())
    }
}
//MANY-TO-MANY
impl Related<super::labels::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_label::Relation::Labels.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_label::Relation::Users.def().rev())
    }
}
//MANY-TO-MANY
impl Related<super::pictures::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_picture::Relation::Pictures.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_picture::Relation::Users.def().rev())
    }
}

impl Related<super::playlists::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Playlists.def()
    }
}

impl Related<super::user_picture::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPicture.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
