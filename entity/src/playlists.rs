//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "playlists")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub playlist_id: i32,
    pub title: String,
    pub duration: Time,
    pub user_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    Users,
}
impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Users => Entity::belongs_to(super::users::Entity).from(Column::UserId).to(super::cake::Column::UserId).into(),
        }
    }
}

//MANY-TO-ONE
impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

//MANY-TO-MANY
impl Related<super::tracks::Entity> for Entity {
    fn to() -> RelationDef {
        super::playlist_track::Relation::Tracks.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::playlist_track::Relation::Playlists.def().rev())
    }
}



impl ActiveModelBehavior for ActiveModel {}
